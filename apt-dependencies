#!/bin/bash

#
# MIT License
#
# Copyright (c) 2022 Fishezzz
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

prog_name="apt-dependencies"
version="v2.0"

usage() {
cat << _USAGE
Usage: ${prog_name} [OPTIONS] [--] <package>

Print a list of installed packages that depend on a given package.

Options:
    -h, --help
        display this help and exit

    -v, --verbose
        be verbose and show more info

    --version
        get the current version of this program

    --    everything after this will be treated as a list of packages.

Arguments:
    The <package> argument will be treated as a single package. Valid regexp can
    be used as well but should be between quotes. When multiple packages are
    provided without using "--" only the last package will be used.

    When "--" is provided, multiple packages or regexps can be provided, when
    seperated by spaces and quoted when needed. This will override any package
    provided before the "--".

    When multiple packages are provided, packages that depend on ANY of the
    provided packages will be returned.
    Dependencies can occur multiple times when providing multiple packages.

_USAGE
}

declare -a requested
verbose=0
debug=0

# parse options and arguments
while (( $# > 0 )) ; do
    param="$1"
    shift

    case "${param}" in
        -h) ;&
        --help)
            usage; exit 0;;
        -v) ;&
        --verbose)
            verbose=1;;
        --version)
            echo "${version}"; exit 0;;
        --)
            requested=("$@"); break;;
        *)
            requested=("${param}");;
    esac
done

# check if any packages are provided
(( "${#requested[@]}" == 0 )) && { echo -e "No package provided!\nTry '${prog_name} --help' for more information." >&2; exit 1; }

## VERBOSE
(( $verbose == 1 )) && echo "Requested packages: ${requested[@]}"

# prepare regexp
regexp=""
for p in "${requested[@]}"; do
    [[ -n "${regexp}" ]] && regexp="${regexp}|"
    regexp="${regexp}(${p})"
done

## DEBUG
(( $debug == 1 && $verbose == 1 )) && echo "Regexp: ${regexp}"

# get all installed packages, outputs format: <package name>/<APT repository> <version> <platform> [<status>]
# split on '/' to get the package name only, dunno why tail is needed
declare -a installed
installed=( $(apt list --installed 2> /dev/null | awk -F '/' '{ print $1 }' | tail -n +2) )

## VERBOSE
(( $verbose == 1 )) && echo "Number of packages installed: ${#installed[@]}"

# make tempfile and trap signals to ensure it gets deleted
temp=$(mktemp -p $HOME 'XXXXXX')
trap "rm ${temp}; exit 2" SIGINT SIGTERM

## DEBUG
(( $debug == 1 && $verbose == 1 )) && echo "Temp file: ${temp}"

# get the dependencies for all installed packages and write them to the temp file
## VERBOSE
(( $verbose == 1 )) && echo -e "\nGetting dependencies of all installed packages ..."
apt show "${installed[@]}" 2> /dev/null > $temp

## VERBOSE
(( $verbose == 1 )) && echo -e "Checking dependencies ...\n"

declare -A found
pkg=""

# loop over all installed packages and check their dependencies
while IFS=$'\n' read line; do
    if [[ -n "${line}" && "${line:0:9}" == "Package: " ]]; then
        # package
        pkg="${line:9}"
    elif [[ -n "${line}" && "${line:0:9}" == "Depends: " && -n "${pkg}" ]]; then
        # dependencies
        if [[ "${line:9}" =~ $regexp ]]; then
            if [[ -z ${found["${pkg}"]} ]]; then
                found["${pkg}"]=1
            else
                ((found["${pkg}"]++))
            fi
        fi
        pkg=""
    fi
done < $temp # read from temp file containing the result of apt show

# print result
if (( ${#found[@]} != 0 )); then
    echo "${!found[@]}" | xargs -n1 | sort
else
    ## VERBOSE
    (( $verbose == 1 )) && echo "No dependencies found."
fi

rm $temp
